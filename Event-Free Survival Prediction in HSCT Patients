{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c59e1ad0",
   "metadata": {
    "papermill": {
     "duration": 0.002695,
     "end_time": "2025-03-02T05:01:52.275349",
     "exception": false,
     "start_time": "2025-03-02T05:01:52.272654",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# CIBMTR: Equity Post-HCT Survival Predictions\n",
    "\n",
    "By Ikechukwu Ugbo"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0a201d7",
   "metadata": {
    "papermill": {
     "duration": 0.001963,
     "end_time": "2025-03-02T05:01:52.279772",
     "exception": false,
     "start_time": "2025-03-02T05:01:52.277809",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This notebook incorporates research-backed feature engineering and references to relevant studies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3b61e688",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T05:01:52.285007Z",
     "iopub.status.busy": "2025-03-02T05:01:52.284698Z",
     "iopub.status.idle": "2025-03-02T05:02:03.199801Z",
     "shell.execute_reply": "2025-03-02T05:02:03.198790Z"
    },
    "papermill": {
     "duration": 10.919548,
     "end_time": "2025-03-02T05:02:03.201372",
     "exception": false,
     "start_time": "2025-03-02T05:01:52.281824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting scikit-survival\r\n",
      "  Downloading scikit_survival-0.24.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (48 kB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m48.9/48.9 kB\u001b[0m \u001b[31m3.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hCollecting lifelines\r\n",
      "  Downloading lifelines-0.30.0-py3-none-any.whl.metadata (3.2 kB)\r\n",
      "Collecting ecos (from scikit-survival)\r\n",
      "  Downloading ecos-2.0.14-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (8.0 kB)\r\n",
      "Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from scikit-survival) (1.4.2)\r\n",
      "Requirement already satisfied: numexpr in /usr/local/lib/python3.10/dist-packages (from scikit-survival) (2.10.2)\r\n",
      "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from scikit-survival) (1.26.4)\r\n",
      "Requirement already satisfied: osqp!=0.6.0,!=0.6.1 in /usr/local/lib/python3.10/dist-packages (from scikit-survival) (0.6.7.post3)\r\n",
      "Requirement already satisfied: pandas>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from scikit-survival) (2.2.2)\r\n",
      "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-survival) (1.13.1)\r\n",
      "Collecting scikit-learn<1.7,>=1.6.1 (from scikit-survival)\r\n",
      "  Downloading scikit_learn-1.6.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)\r\n",
      "Requirement already satisfied: matplotlib>=3.0 in /usr/local/lib/python3.10/dist-packages (from lifelines) (3.7.5)\r\n",
      "Requirement already satisfied: autograd>=1.5 in /usr/local/lib/python3.10/dist-packages (from lifelines) (1.7.0)\r\n",
      "Collecting autograd-gamma>=0.3 (from lifelines)\r\n",
      "  Downloading autograd-gamma-0.5.0.tar.gz (4.0 kB)\r\n",
      "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "Collecting formulaic>=0.2.2 (from lifelines)\r\n",
      "  Downloading formulaic-1.1.1-py3-none-any.whl.metadata (6.9 kB)\r\n",
      "Collecting interface-meta>=1.2.0 (from formulaic>=0.2.2->lifelines)\r\n",
      "  Downloading interface_meta-1.3.0-py3-none-any.whl.metadata (6.7 kB)\r\n",
      "Requirement already satisfied: typing-extensions>=4.2.0 in /usr/local/lib/python3.10/dist-packages (from formulaic>=0.2.2->lifelines) (4.12.2)\r\n",
      "Requirement already satisfied: wrapt>=1.0 in /usr/local/lib/python3.10/dist-packages (from formulaic>=0.2.2->lifelines) (1.17.0)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0->lifelines) (1.3.1)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0->lifelines) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0->lifelines) (4.55.3)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0->lifelines) (1.4.7)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0->lifelines) (24.2)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0->lifelines) (11.0.0)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0->lifelines) (3.2.0)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0->lifelines) (2.8.2)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy->scikit-survival) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy->scikit-survival) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy->scikit-survival) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy->scikit-survival) (2025.0.1)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy->scikit-survival) (2022.0.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy->scikit-survival) (2.4.1)\r\n",
      "Requirement already satisfied: qdldl in /usr/local/lib/python3.10/dist-packages (from osqp!=0.6.0,!=0.6.1->scikit-survival) (0.1.7.post4)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4.0->scikit-survival) (2024.2)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4.0->scikit-survival) (2024.2)\r\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<1.7,>=1.6.1->scikit-survival) (3.5.0)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib>=3.0->lifelines) (1.17.0)\r\n",
      "Requirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy->scikit-survival) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy->scikit-survival) (2022.0.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy->scikit-survival) (1.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy->scikit-survival) (2024.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy->scikit-survival) (2024.2.0)\r\n",
      "Downloading scikit_survival-0.24.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.7 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.7/3.7 MB\u001b[0m \u001b[31m88.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading lifelines-0.30.0-py3-none-any.whl (349 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m349.3/349.3 kB\u001b[0m \u001b[31m28.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading formulaic-1.1.1-py3-none-any.whl (115 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m115.7/115.7 kB\u001b[0m \u001b[31m9.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading scikit_learn-1.6.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.5 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.5/13.5 MB\u001b[0m \u001b[31m106.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading ecos-2.0.14-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (218 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m218.9/218.9 kB\u001b[0m \u001b[31m16.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading interface_meta-1.3.0-py3-none-any.whl (14 kB)\r\n",
      "Building wheels for collected packages: autograd-gamma\r\n",
      "  Building wheel for autograd-gamma (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Created wheel for autograd-gamma: filename=autograd_gamma-0.5.0-py3-none-any.whl size=4031 sha256=2ebfeffd1cacbd80d3ad009d1ac3052890ad2c251532f398580705a71623ce25\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/25/cc/e0/ef2969164144c899fedb22b338f6703e2b9cf46eeebf254991\r\n",
      "Successfully built autograd-gamma\r\n",
      "Installing collected packages: interface-meta, scikit-learn, formulaic, ecos, autograd-gamma, scikit-survival, lifelines\r\n",
      "  Attempting uninstall: scikit-learn\r\n",
      "    Found existing installation: scikit-learn 1.2.2\r\n",
      "    Uninstalling scikit-learn-1.2.2:\r\n",
      "      Successfully uninstalled scikit-learn-1.2.2\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "category-encoders 2.7.0 requires scikit-learn<1.6.0,>=1.0.0, but you have scikit-learn 1.6.1 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mSuccessfully installed autograd-gamma-0.5.0 ecos-2.0.14 formulaic-1.1.1 interface-meta-1.3.0 lifelines-0.30.0 scikit-learn-1.6.1 scikit-survival-0.24.0\r\n"
     ]
    }
   ],
   "source": [
    "!pip install scikit-survival lifelines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d569ec20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T05:02:03.209437Z",
     "iopub.status.busy": "2025-03-02T05:02:03.209172Z",
     "iopub.status.idle": "2025-03-02T05:02:10.565165Z",
     "shell.execute_reply": "2025-03-02T05:02:10.564487Z"
    },
    "papermill": {
     "duration": 7.361636,
     "end_time": "2025-03-02T05:02:10.566782",
     "exception": false,
     "start_time": "2025-03-02T05:02:03.205146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import StratifiedGroupKFold, StratifiedKFold\n",
    "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.feature_selection import RFE\n",
    "from xgboost import XGBRegressor\n",
    "from scipy.stats import randint, uniform, loguniform\n",
    "from lifelines.utils import concordance_index\n",
    "import shap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f737bd5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T05:02:10.577188Z",
     "iopub.status.busy": "2025-03-02T05:02:10.576794Z",
     "iopub.status.idle": "2025-03-02T05:02:10.597582Z",
     "shell.execute_reply": "2025-03-02T05:02:10.596788Z"
    },
    "papermill": {
     "duration": 0.026622,
     "end_time": "2025-03-02T05:02:10.599001",
     "exception": false,
     "start_time": "2025-03-02T05:02:10.572379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class HCTSurvivalPredictor:\n",
    "    def __init__(self, data_path):\n",
    "        self.data = pd.read_csv(data_path)\n",
    "        self.preprocessor = None\n",
    "        self.model = None\n",
    "        self.feature_names = []\n",
    "        self.preprocessed_data = None\n",
    "        self.selector = None\n",
    "        self.best_params_ = {}\n",
    "        self.final_metric = 0.0\n",
    "\n",
    "    def _engineer_features(self, data):\n",
    "        \"\"\"Feature engineering including HCT-CI calculation and additional features.\"\"\"\n",
    "        hla_columns = [\n",
    "            \"hla_match_c_high\", \"hla_high_res_8\", \"hla_low_res_6\", \"hla_high_res_6\",\n",
    "            \"hla_high_res_10\", \"hla_match_dqb1_high\", \"hla_nmdp_6\", \"hla_match_c_low\",\n",
    "            \"hla_match_drb1_low\", \"hla_match_dqb1_low\", \"hla_match_a_high\", \"hla_match_b_low\",\n",
    "            \"hla_match_a_low\", \"hla_match_b_high\", \"hla_low_res_8\", \"hla_match_drb1_high\",\n",
    "            \"hla_low_res_10\"\n",
    "        ]\n",
    "        data['hla_composite'] = data[hla_columns].mean(axis=1)\n",
    "        data['age_donor_diff'] = data['age_at_hct'] - data['donor_age']\n",
    "\n",
    "        def map_dri_score(val):\n",
    "            if pd.isnull(val):\n",
    "                return np.nan\n",
    "            val_lower = str(val).lower().strip()\n",
    "            if 'very high' in val_lower:\n",
    "                return 4\n",
    "            elif 'high' in val_lower:\n",
    "                return 3\n",
    "            elif 'intermediate' in val_lower:\n",
    "                return 2\n",
    "            elif 'low' in val_lower:\n",
    "                return 1\n",
    "            else:\n",
    "                return np.nan\n",
    "        mapped_dri = data['dri_score'].apply(map_dri_score)\n",
    "        data['comorb_risk'] = data['comorbidity_score'] * mapped_dri\n",
    "\n",
    "        def calculate_hct_ci(row):\n",
    "            score = 0\n",
    "            if row.get(\"arrhythmia\", \"No\") == \"Yes\":\n",
    "                score += 1\n",
    "            if row.get(\"cardiac\", \"No\") == \"Yes\":\n",
    "                score += 1\n",
    "            if row.get(\"diabetes\", \"No\") == \"Yes\":\n",
    "                score += 1\n",
    "            if row.get(\"psych_disturb\", \"No\") == \"Yes\":\n",
    "                score += 1\n",
    "            if row.get(\"hepatic_mild\", \"No\") == \"Yes\":\n",
    "                score += 1\n",
    "            if row.get(\"obesity\", \"No\") == \"Yes\":\n",
    "                score += 1\n",
    "            if row.get(\"rheum_issue\", \"No\") == \"Yes\":\n",
    "                score += 2\n",
    "            if row.get(\"peptic_ulcer\", \"No\") == \"Yes\":\n",
    "                score += 2\n",
    "            if row.get(\"renal_issue\", \"No\") == \"Yes\":\n",
    "                score += 2\n",
    "            if row.get(\"pulm_moderate\", \"No\") == \"Yes\":\n",
    "                score += 2\n",
    "            if row.get(\"prior_tumor\", \"No\") == \"Yes\":\n",
    "                score += 3\n",
    "            if row.get(\"pulm_severe\", \"No\") == \"Yes\":\n",
    "                score += 3\n",
    "            if row.get(\"hepatic_severe\", \"No\") == \"Yes\":\n",
    "                score += 3\n",
    "            return score\n",
    "        data[\"HCT_CI\"] = data.apply(calculate_hct_ci, axis=1)\n",
    "        \n",
    "        # Additional feature: years since 2000\n",
    "        data['hct_advances'] = data['year_hct'] - 2000\n",
    "        # Equity-related feature: minority flag\n",
    "        data['minority_flag'] = data['race_group'].isin([\n",
    "            'Black or African-American', \n",
    "            'Native Hawaiian or other Pacific Islander',\n",
    "            'American Indian or Alaska Native'\n",
    "        ]).astype(int)\n",
    "        return data\n",
    "\n",
    "    def _preprocess_data(self):\n",
    "        \"\"\"Preprocessing pipeline.\"\"\"\n",
    "        numeric_features = ['age_at_hct', 'donor_age', 'comorbidity_score', 'karnofsky_score',\n",
    "                            'hla_composite', 'age_donor_diff', 'comorb_risk', 'HCT_CI', 'hct_advances']\n",
    "        hla_columns = [\n",
    "            \"hla_high_res_8\", \"hla_low_res_6\", \"hla_nmdp_6\", \"hla_match_c_low\",\n",
    "            \"hla_match_drb1_low\", \"hla_match_dqb1_low\", \"hla_match_b_low\",\n",
    "            \"hla_match_a_low\", \"hla_low_res_8\", \"hla_low_res_10\" # here we matched only low-res hla columns frome RFE!\n",
    "        ]\n",
    "        numeric_features += hla_columns\n",
    "        categorical_features = ['graft_type', 'conditioning_intensity', 'cmv_status', \n",
    "                                'in_vivo_tcd', 'tce_match', 'race_group', 'ethnicity']\n",
    "        numeric_transformer = Pipeline(steps=[\n",
    "            ('imputer', SimpleImputer(strategy='median')),\n",
    "            ('scaler', StandardScaler())\n",
    "        ])\n",
    "        categorical_transformer = Pipeline(steps=[\n",
    "            ('imputer', SimpleImputer(strategy='most_frequent')),\n",
    "            ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
    "        ])\n",
    "        self.preprocessor = ColumnTransformer(\n",
    "            transformers=[\n",
    "                ('num', numeric_transformer, numeric_features),\n",
    "                ('cat', categorical_transformer, categorical_features)\n",
    "            ]\n",
    "        )\n",
    "\n",
    "    def _select_features(self, X, y):\n",
    "        selector = RFE(XGBRegressor(n_estimators=100), n_features_to_select=30)\n",
    "        selector.fit(X, y)\n",
    "        return selector\n",
    "\n",
    "    def _get_hyperparameter_space(self):\n",
    "        return {\n",
    "            'n_estimators': randint(500, 2000),\n",
    "            'learning_rate': loguniform(1e-3, 0.1),\n",
    "            'max_depth': randint(3, 9),\n",
    "            'subsample': uniform(0.6, 0.4),\n",
    "            'colsample_bytree': uniform(0.6, 0.4),\n",
    "            'reg_alpha': loguniform(1e-3, 10),\n",
    "            'reg_lambda': loguniform(1e-3, 10),\n",
    "            'gamma': loguniform(1e-3, 0.5),\n",
    "            'min_child_weight': randint(1, 10)\n",
    "        }\n",
    "\n",
    "    def _custom_hyperparameter_tuning(self, X, y, events, groups, n_iter=10, n_splits=3):\n",
    "        \"\"\"\n",
    "        Custom hyperparameter tuning loop that samples candidate parameters,\n",
    "        performs StratifiedGroupKFold cross-validation, and evaluates each candidate\n",
    "        using the fairness-aware metric: (mean c-index across race groups) minus (std deviation).\n",
    "        \"\"\"\n",
    "        best_metric = -np.inf\n",
    "        best_params = None\n",
    "        param_space = self._get_hyperparameter_space()\n",
    "        \n",
    "        sgkf = StratifiedGroupKFold(n_splits=n_splits, shuffle=True, random_state=42)\n",
    "        \n",
    "        for i in range(n_iter):\n",
    "            # Sample a candidate parameter set\n",
    "            candidate = { key: param_space[key].rvs() for key in param_space }\n",
    "            fold_metrics = []\n",
    "            # For each CV fold\n",
    "            for train_idx, val_idx in sgkf.split(X, y=groups, groups=groups):\n",
    "                X_train, X_val = X[train_idx], X[val_idx]\n",
    "                if isinstance(y, pd.Series):\n",
    "                    y_train = y.iloc[train_idx]\n",
    "                    y_val = y.iloc[val_idx]\n",
    "                else:\n",
    "                    y_train, y_val = y[train_idx], y[val_idx]\n",
    "                if isinstance(events, pd.Series):\n",
    "                    events_train = events.iloc[train_idx]\n",
    "                    events_val = events.iloc[val_idx]\n",
    "                else:\n",
    "                    events_train, events_val = events[train_idx], events[val_idx]\n",
    "                \n",
    "                model = XGBRegressor(\n",
    "                    objective='survival:cox',\n",
    "                    eval_metric='cox-nloglik',\n",
    "                    tree_method='hist',\n",
    "                    n_jobs=-1,\n",
    "                    **candidate\n",
    "                )\n",
    "                model.fit(X_train, y_train, eval_set=[(X_val, y_val)],\n",
    "                          early_stopping_rounds=50, verbose=False)\n",
    "                preds = model.predict(X_val)\n",
    "                \n",
    "                fold_groups = groups[val_idx]\n",
    "                unique_groups = np.unique(fold_groups)\n",
    "                c_indices = []\n",
    "                for g in unique_groups:\n",
    "                    mask = (fold_groups == g)\n",
    "                    if np.sum(mask) < 2:\n",
    "                        continue\n",
    "                    c = concordance_index(y_val[mask], preds[mask], events_val[mask])\n",
    "                    c_indices.append(c)\n",
    "                fold_metric = np.mean(c_indices) - np.std(c_indices) if c_indices else 0\n",
    "                fold_metrics.append(fold_metric)\n",
    "            \n",
    "            candidate_score = np.mean(fold_metrics)\n",
    "            print(f\"Candidate {i+1}/{n_iter} with params {candidate} yields score: {candidate_score:.4f}\")\n",
    "            if candidate_score > best_metric:\n",
    "                best_metric = candidate_score\n",
    "                best_params = candidate\n",
    "\n",
    "        return best_params, best_metric\n",
    "\n",
    "    def train_model(self):\n",
    "        \"\"\"Train model with fairness-aware hyperparameter tuning using the stratified C-index.\"\"\"\n",
    "        self.data = self._engineer_features(self.data)\n",
    "        self._preprocess_data()\n",
    "        y = self.data['efs_time']\n",
    "        events = self.data['efs']\n",
    "        groups = self.data['race_group'].values\n",
    "        X = self.preprocessor.fit_transform(self.data)\n",
    "        if hasattr(X, \"toarray\"):\n",
    "            X = X.toarray()\n",
    "        self.preprocessed_data = X\n",
    "        self.selector = self._select_features(X, y)\n",
    "        X_selected = self.selector.transform(X)\n",
    "        \n",
    "        best_params, best_metric = self._custom_hyperparameter_tuning(X_selected, y, events, groups)\n",
    "        print(\"Best hyperparameters:\", best_params, \"with stratified C-index:\", best_metric)\n",
    "        self.best_params_ = best_params\n",
    "        \n",
    "        # Train final model on full data using best parameters\n",
    "        self.model = XGBRegressor(\n",
    "            objective='survival:cox',\n",
    "            eval_metric='cox-nloglik',\n",
    "            tree_method='hist',\n",
    "            n_jobs=-1,\n",
    "            **best_params\n",
    "        )\n",
    "        self.model.fit(X_selected, y, verbose=False)\n",
    "\n",
    "    def predict_risk(self, test_data):\n",
    "        \"\"\"Predict risk scores for new data directly (without exponential transformation).\"\"\"\n",
    "        test_data = self._engineer_features(test_data)\n",
    "        test_processed = self.preprocessor.transform(test_data)\n",
    "        test_selected = self.selector.transform(test_processed)\n",
    "        return self.model.predict(test_selected)\n",
    "\n",
    "    def explain_model(self):\n",
    "        \"\"\"Generate SHAP explanations.\"\"\"\n",
    "        if self.preprocessed_data is None:\n",
    "            raise ValueError(\"Train model first\")\n",
    "        X = self.preprocessed_data\n",
    "        if hasattr(X, \"toarray\"):\n",
    "            X = X.toarray()\n",
    "        X_selected = self.selector.transform(X)\n",
    "        explainer = shap.TreeExplainer(self.model)\n",
    "        shap_values = explainer.shap_values(X_selected)\n",
    "        shap.summary_plot(shap_values, X_selected, feature_names=self.preprocessor.get_feature_names_out())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "19bdf195",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2025-03-02T05:02:10.606516Z",
     "iopub.status.busy": "2025-03-02T05:02:10.606262Z",
     "iopub.status.idle": "2025-03-02T05:05:03.383494Z",
     "shell.execute_reply": "2025-03-02T05:05:03.382595Z"
    },
    "papermill": {
     "duration": 172.782616,
     "end_time": "2025-03-02T05:05:03.385104",
     "exception": false,
     "start_time": "2025-03-02T05:02:10.602488",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Candidate 1/10 with params {'n_estimators': 1346, 'learning_rate': 0.0071110144941711325, 'max_depth': 8, 'subsample': 0.8317280659492248, 'colsample_bytree': 0.7051654368186545, 'reg_alpha': 0.5646510648274968, 'reg_lambda': 0.024084583878856987, 'gamma': 0.03988789732458595, 'min_child_weight': 8} yields score: 0.4125\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Candidate 2/10 with params {'n_estimators': 1541, 'learning_rate': 0.005502678602595232, 'max_depth': 6, 'subsample': 0.6961827507647885, 'colsample_bytree': 0.7066283377684153, 'reg_alpha': 0.17924374184400174, 'reg_lambda': 0.10533703604284353, 'gamma': 0.002118626667684122, 'min_child_weight': 8} yields score: 0.4213\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Candidate 3/10 with params {'n_estimators': 1445, 'learning_rate': 0.00799121745566168, 'max_depth': 7, 'subsample': 0.6790794246926118, 'colsample_bytree': 0.9881445972885372, 'reg_alpha': 0.02528420184190295, 'reg_lambda': 0.0049111029552241945, 'gamma': 0.22276687787047808, 'min_child_weight': 7} yields score: 0.4201\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Candidate 4/10 with params {'n_estimators': 962, 'learning_rate': 0.005167809468943812, 'max_depth': 3, 'subsample': 0.8424146097461596, 'colsample_bytree': 0.718894121542097, 'reg_alpha': 0.22442530271199548, 'reg_lambda': 0.0013490867571073113, 'gamma': 0.045479406036758784, 'min_child_weight': 5} yields score: 0.4351\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Candidate 5/10 with params {'n_estimators': 1616, 'learning_rate': 0.012078408793226901, 'max_depth': 4, 'subsample': 0.8646604107796223, 'colsample_bytree': 0.6228507702737234, 'reg_alpha': 0.002380524369183093, 'reg_lambda': 0.012839460534047314, 'gamma': 0.0012071955822899744, 'min_child_weight': 7} yields score: 0.4274\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Candidate 6/10 with params {'n_estimators': 1344, 'learning_rate': 0.0893227469592319, 'max_depth': 8, 'subsample': 0.791165921744287, 'colsample_bytree': 0.8459376780050629, 'reg_alpha': 0.2888852067891995, 'reg_lambda': 0.011271647844397716, 'gamma': 0.0027469141857356543, 'min_child_weight': 1} yields score: 0.4167\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Candidate 7/10 with params {'n_estimators': 727, 'learning_rate': 0.001529041936933217, 'max_depth': 6, 'subsample': 0.8335133633690845, 'colsample_bytree': 0.9381646252974856, 'reg_alpha': 2.4606754203490517, 'reg_lambda': 0.0011576181314437183, 'gamma': 0.00560928969506855, 'min_child_weight': 3} yields score: 0.4260\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Candidate 8/10 with params {'n_estimators': 576, 'learning_rate': 0.08173521208202646, 'max_depth': 4, 'subsample': 0.8728639091126909, 'colsample_bytree': 0.8445367234750318, 'reg_alpha': 0.008052800677772606, 'reg_lambda': 0.003561989224306867, 'gamma': 0.015455571245821096, 'min_child_weight': 6} yields score: 0.4306\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Candidate 9/10 with params {'n_estimators': 1984, 'learning_rate': 0.0014349435844361175, 'max_depth': 4, 'subsample': 0.8888611672549196, 'colsample_bytree': 0.9351080486891483, 'reg_alpha': 0.021762999823654566, 'reg_lambda': 6.390182505481113, 'gamma': 0.0014346908825098724, 'min_child_weight': 3} yields score: 0.4363\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Candidate 10/10 with params {'n_estimators': 983, 'learning_rate': 0.00597488914832346, 'max_depth': 8, 'subsample': 0.7231094153939603, 'colsample_bytree': 0.8097737656482109, 'reg_alpha': 0.6879904136438021, 'reg_lambda': 0.03830777717054483, 'gamma': 0.0082364788616837, 'min_child_weight': 1} yields score: 0.4111\n",
      "Best hyperparameters: {'n_estimators': 1984, 'learning_rate': 0.0014349435844361175, 'max_depth': 4, 'subsample': 0.8888611672549196, 'colsample_bytree': 0.9351080486891483, 'reg_alpha': 0.021762999823654566, 'reg_lambda': 6.390182505481113, 'gamma': 0.0014346908825098724, 'min_child_weight': 3} with stratified C-index: 0.43626868861662915\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x950 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    # Initialize predictor\n",
    "    predictor = HCTSurvivalPredictor('/kaggle/input/equity-post-HCT-survival-predictions/train.csv')\n",
    "    \n",
    "    # Train model with equity considerations\n",
    "    predictor.train_model()\n",
    "    \n",
    "    # Generate explanations\n",
    "    predictor.explain_model()\n",
    "    \n",
    "    # Make predictions\n",
    "    test_data = pd.read_csv('/kaggle/input/equity-post-HCT-survival-predictions/test.csv')\n",
    "    predictions = predictor.predict_risk(test_data)\n",
    "    \n",
    "    # Create submission file\n",
    "    submission = pd.DataFrame({\n",
    "        'ID': test_data['ID'],\n",
    "        'prediction': predictions\n",
    "    })\n",
    "    submission.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f2b3a175",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T05:05:03.399134Z",
     "iopub.status.busy": "2025-03-02T05:05:03.398880Z",
     "iopub.status.idle": "2025-03-02T05:05:03.406808Z",
     "shell.execute_reply": "2025-03-02T05:05:03.406054Z"
    },
    "papermill": {
     "duration": 0.01614,
     "end_time": "2025-03-02T05:05:03.407985",
     "exception": false,
     "start_time": "2025-03-02T05:05:03.391845",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      ID  prediction\n",
      "0  28800    0.774559\n",
      "1  28801    0.866730\n",
      "2  28802    1.289771\n"
     ]
    }
   ],
   "source": [
    "print(submission.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04687efc",
   "metadata": {
    "papermill": {
     "duration": 0.006065,
     "end_time": "2025-03-02T05:05:03.420758",
     "exception": false,
     "start_time": "2025-03-02T05:05:03.414693",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# References:\n",
    "1. Choi, E.-J., Jun, T.J., Park, H.S., Lee, J.H., Lee, K.H., Kim, Y.H., Lee, Y.S., Kang, Y.A., Jeon, M., Kang, H., Woo, J., & Lee, J.H. (2022). Predicting long-term survival after allogeneic hematopoietic cell transplantation in patients with hematologic malignancies: Machine learning–based model development and validation. JMIR Medical Informatics, 10(3), e32313. https://doi.org/10.2196/32313\n",
    "\n",
    "2. Ciurea, S., Kongtim, P., Hasan, O., Perez, J., Torres, J., Rondon, G., & Champlin, R. (2020).\n",
    "    Validation of a Hematopoietic Cell Transplant-Composite Risk (HCT-CR) Model for Post-Transplant Survival Prediction in Patients with Hematologic Malignancies.\n",
    "    Clinical Cancer Research, 26, 2404–2410. https://doi.org/10.1158/1078-0432.CCR-19-3919\n",
    "\n",
    "3. Solh, M., Zhang, X., Connor, K., Brown, S., Solomon, S., Morris, L., Holland, H., & Bashey, A. (2016).\n",
    "    Factors Predicting Graft-versus-Host Disease-Free, Relapse-Free Survival after Allogeneic Hematopoietic Cell Transplantation: Multivariable Analysis from a Single Center.\n",
    "    Biology of Blood and Marrow Transplantation, 22(8), 1403–1409. https://doi.org/10.1016/j.bbmt.2016.04.006\n",
    "\n",
    "4. Gagelmann, N., Ditschkowski, M., Bogdanov, R., Bredin, S., Robin, M., Cassinat, B., Shahswar, R., Thol, F., Heuser, M., Socié, G., Beelen, D., Triviai, I., Badbaran, A., & Kröger, N. (2019).\n",
    "    Comprehensive Clinical-Molecular Transplant Scoring System for Myelofibrosis Undergoing Stem Cell Transplantation.\n",
    "    Blood, 133(20), 2233–2242. https://doi.org/10.1182/blood-2018-12-890889\n",
    "\n",
    "5. Saad, A., Mahindra, A., Zhang, M., Zhong, X., Costa, L., Dispenzieri, A., Drobyski, W., Freytes, C., Gale, R., Gasparetto, C., Holmberg, L., Kamble, R., Krishnan, A., Kyle, R., Marks, D., Nishihori, T., Pasquini, M., Ramanathan, M., Lonial, S., Savani, B., Saber, W., Sharma, M., Sorror, M., Wirk, B., & Hari, P. (2014).\n",
    "    Hematopoietic Cell Transplant Comorbidity Index is Predictive of Survival after Autologous Hematopoietic Cell Transplantation in Multiple Myeloma.\n",
    "    Biology of Blood and Marrow Transplantation, 20(3), 402–408.e1. https://doi.org/10.1016/j.bbmt.2013.12.557\n",
    "\n",
    "6. Solh, M., Speckhart, D., Solomon, S., Bashey, A., Morris, L., Zhang, X., & Holland, H. (2020).\n",
    "    The Transplant Evaluation Rating Scale Predicts Overall Survival after Allogeneic Hematopoietic Stem Cell Transplantation.\n",
    "    Blood Advances, 4(19), 4812–4821. https://doi.org/10.1182/bloodadvances.2020002204\n",
    "\n",
    "7. Zhou, W., Chen, G., Gong, D., Gao, Y., & Yu, L. (2023).\n",
    "    Risk Factors for Post-Transplant Relapse and Survival in Younger Adult Patients with t(8;21)(q22;q22) Acute Myeloid Leukemia Undergoing Allogeneic Hematopoietic Stem Cell Transplantation: A Multicenter Retrospective Study.\n",
    "    Frontiers in Oncology, 13. https://doi.org/10.3389/fonc.2023.1138853\n",
    "\n",
    "8. Thakar, M., Broglie, L., Logan, B., Artz, A., Bunin, N., Burroughs, L., Fretham, C., Jacobsohn, D., Loren, A., Kurtzberg, J., Martinez, C., Mineishi, S., Nelson, A., Woolfrey, A., Pasquini, M., & Sorror, M. (2019).\n",
    "    The Hematopoietic Cell Transplant Comorbidity Index Predicts Survival after Allogeneic Transplant for Nonmalignant Diseases.\n",
    "    Blood, 133(7), 754–762. https://doi.org/10.1182/blood-2018-09-876284\n",
    "\n",
    "9. Lu, Y., You, T., Wang, W., Qi, J., Yang, P., Song, Y., Chen, J., Fu, J., Ge, Y., Zhu, X., & Wu, D. (2024).\n",
    "    Patient‐Reported Physical Well‐Being Predicts Good Long‐Term Survival of Hematopoietic Stem Cell Transplantation.\n",
    "    Cancer Medicine, 13. https://doi.org/10.1002/cam4.7409\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "databundleVersionId": 10381525,
     "sourceId": 70942,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30839,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 195.226293,
   "end_time": "2025-03-02T05:05:04.852564",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-02T05:01:49.626271",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
